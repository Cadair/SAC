!############################################################################
!Stuart's vacusr module 2

INCLUDE:vacusr.gravity.t
INCLUDE:vacusr.viscosity.t
!=============================================================================

SUBROUTINE specialsource(qdt,ixI^L,ixO^L,iws,qtC,wCT,qt,w)
  
  INCLUDE 'vacdef.f'
  
  INTEGER:: ixI^L, ixO^L, iws(niw_), ix^L
  DOUBLE PRECISION:: qdt, qtC, qt, wCT(ixG^T,nw), w(ixG^T,nw)

!-----------------------------------------------------------------------------
  eqpar(nu_)=1.d0
  eqpar(eta_)=0.d0


  !This is some hyperdiffusion stabilisaton...

  IF(ABS(eqpar(nu_))>smalldouble)&
       CALL addsource_visc(qdt,ixI^L,ixO^L,iws,qtC,wCT,qt,w)


  RETURN
END SUBROUTINE specialsource

!============================================================================
SUBROUTINE specialini(ix^L,w)
  INCLUDE 'vacdef.f'
  INTEGER:: ix^L,ix^D
  DOUBLE PRECISION:: w(ixG^T,nw),r_0,r,centre,xx,yy,zz
  !CALL die("Special ini not defined")
  
  CALL primitive(ix^L,w)
  !Set a uniform pressure
  w(ix^S,p_) = 10.d0

  r_0 = 0.05d0
  centre=0.5d0

  {DO ix^D=ixmin^D,ixmax^D\}
  
  xx= x(ix^D,1)
  yy = x(ix^D,2)
  zz = x(ix^D,3)

  r = SQRT((xx-centre)**2 + (yy-centre)**2 + (zz-centre)**2)
  
  IF (r .LT. r_0) THEN
     PRINT*, r
     w(ix^D,p_) = 2.d0
  END IF
  
  {ENDDO\}
  
  CALL conserve(ix^L,w)

  
  RETURN
END SUBROUTINE specialini

!=============================================================================
SUBROUTINE readfileini_special(w)
  INCLUDE 'vacdef.f'
  DOUBLE PRECISION:: w(ixG^T,nw)

  CALL die('Special readfileini is not defined')
END SUBROUTINE readfileini_special

!=============================================================================
SUBROUTINE savefileout_special(qunit,w,ix^L)
  INCLUDE 'vacdef.f'
  INTEGER:: qunit,ix^L
  DOUBLE PRECISION:: w(ixG^T,nw)

  CALL die('Special savefileout is not defined')
END SUBROUTINE savefileout_special

!=============================================================================
SUBROUTINE savefilelog_special(qunit,w,ix^L)
INCLUDE 'vacdef.f'
INTEGER:: qunit,ix^L
DOUBLE PRECISION:: w(ixG^T,nw)
CALL die('Special savefilelog is not defined')
END SUBROUTINE savefilelog_special

!=============================================================================
SUBROUTINE getdt_special(w,ix^L)

  ! If the Coriolis force is made very strong it may require time step limiting,
  ! but this is not implemented here.
  
  INCLUDE 'vacdef.f'
  DOUBLE PRECISION:: w(ixG^T,nw)
  INTEGER:: ix^L
  
  IF(ABS(eqpar(nu_))>smalldouble) THEN
     CALL getdt_visc(w,ix^L)
  END IF
  
  CALL getdt_grav(w,ix^L)
  RETURN
END SUBROUTINE getdt_special

!=============================================================================
SUBROUTINE specialbound(qt,ix^L,iw,iB,w)

INCLUDE 'vacdef.f'

INTEGER:: ix^L,iw,iB
DOUBLE PRECISION:: qt,w(ixG^T,nw)

RETURN
END SUBROUTINE specialbound
